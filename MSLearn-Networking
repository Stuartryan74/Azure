Create a virtual network and network security group
First, you'll create a resource group, the virtual network, and subnets for your server resources. You'll then create a network security group.
Open the Azure Cloud Shell  in your browser, and log in to the directory with access to the subscription you want to create resources in. Use the Bash version of Cloud Shell.
Run the following command in the Cloud Shell to create a variable to store your resource group name, and a resource group for your resources. Replace <resource group name> with a name for your resource group, and <location> with the Azure region you'd like to deploy your resources in.
Azure CLI

Copy
rg=nsg

az group create --name $rg --location uksouth
Run the following command in Azure Cloud Shell to create the ERP-servers virtual network and the Applications subnet.
Azure CLI

Copy
az network vnet create \
    --resource-group $rg \
    --name ERP-servers \
    --address-prefix 10.0.0.0/16 \
    --subnet-name Applications \
    --subnet-prefix 10.0.0.0/24
Run the following command in Cloud Shell to create the Databases subnet.
Azure CLI

Copy
az network vnet subnet create \
    --resource-group $rg \
    --vnet-name ERP-servers \
    --address-prefix 10.0.1.0/24 \
    --name Databases
Run the following command in Cloud Shell to create the ERP-SERVERS-NSG network security group.
Azure CLI

Copy
az network nsg create \
    --resource-group $rg \
    --name ERP-SERVERS-NSG
Create virtual machines running Ubuntu
Next, you create two virtual machines called AppServer and DataServer. You deploy AppServer to the Applications subnet, and DataServer to the Databases subnet. Add the virtual machine network interfaces to the ERP-SERVERS-NSG network security group. Then use these virtual machines to test your network security group.
Run the following command in Cloud Shell to build the AppServer virtual machine. Define a <password> for the admin account.
Azure CLI

Copy
wget -N https://raw.githubusercontent.com/MicrosoftDocs/mslearn-secure-and-isolate-with-nsg-and-service-endpoints/master/cloud-init.yml && \
az vm create \
    --resource-group $rg \
    --name AppServer \
    --vnet-name ERP-servers \
    --subnet Applications \
    --nsg ERP-SERVERS-NSG \
    --image UbuntuLTS \
    --size Standard_B1ls \
    --admin-username azureuser \
    --custom-data cloud-init.yml \
    --no-wait \
    --admin-password <password>
Run the following command in Cloud Shell to build the DataServer virtual machine. Define a <password> for the admin account.
Azure CLI

Copy
az vm create \
    --resource-group $rg \
    --name DataServer \
    --vnet-name ERP-servers \
    --subnet Databases \
    --nsg ERP-SERVERS-NSG \
    --size Standard_B1ls \
    --image UbuntuLTS \
    --admin-username azureuser \
    --custom-data cloud-init.yml \
    --admin-password <password>
It can take several minutes for the virtual machines to be in a running state. To confirm that the virtual machines are running, run the following command in Cloud Shell.
Azure CLI

Copy
az vm list \
    --resource-group $rg \
    --show-details \
    --query "[*].{Name:name, Provisioned:provisioningState, Power:powerState}" \
    --output table
When virtual machine creation is complete, you should see the following output.
output

Copy
Name        Provisioned    Power
----------  -------------  ----------
AppServer   Succeeded      VM running
DataServer  Succeeded      VM running
Check default connectivity
Now, you'll try to open a Secure Shell (SSH) session to each of your virtual machines. Remember, so far you've deployed a network security group with default rules.
To connect to your virtual machines, use SSH directly from Cloud Shell. To do this, you need the public IP addresses that have been assigned to your virtual machines. Run the following command in Cloud Shell to list the IP addresses that you'll use to connect to the virtual machines.
Azure CLI

Copy
az vm list \
    --resource-group $rg \
    --show-details \
    --query "[*].{Name:name, PrivateIP:privateIps, PublicIP:publicIps}" \
    --output table
To make it easier to connect to your virtual machines during the rest of this exercise, assign the public IP addresses to variables. Run the following command in Cloud Shell to save the public IP address of AppServer and DataServer to a variable.
bash

Copy
APPSERVERIP="$(az vm list-ip-addresses \
                 --resource-group $rg \
                 --name AppServer \
                 --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
                 --output tsv)"

DATASERVERIP="$(az vm list-ip-addresses \
                 --resource-group $rg \
                 --name DataServer \
                 --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
                 --output tsv)"
Run the following command in Cloud Shell to check whether you can connect to your AppServer virtual machine.
bash

Copy
ssh azureuser@$APPSERVERIP -o ConnectTimeout=5
You'll get a Connection timed out message.
Run the following command in Cloud Shell to check whether you can connect to your DataServer virtual machine.
bash

Copy
ssh azureuser@$DATASERVERIP -o ConnectTimeout=5
You'll get the same connection failure message.
Remember that the default rules deny all inbound traffic into a virtual network, unless this traffic is coming from another virtual network. The Deny All Inbound rule blocked the inbound SSH connections you just attempted.
Inbound
Name	Priority	Source IP	Destination IP	Access
Allow VNet Inbound	65000	VIRTUAL_NETWORK	VIRTUAL_NETWORK	Allow
Deny All Inbound	65500	*	*	Deny
Create a security rule for SSH
As you've now experienced, the default rules in your ERP-SERVERS-NSG network security group include a Deny All Inbound rule. You'll now add a rule so that you can use SSH to connect to AppServer and DataServer.
Run the following command in Cloud Shell to create a new inbound security rule to enable SSH access.
Azure CLI

Copy
az network nsg rule create \
    --resource-group $rg \
    --nsg-name ERP-SERVERS-NSG \
    --name AllowSSHRule \
    --direction Inbound \
    --priority 100 \
    --source-address-prefixes '*' \
    --source-port-ranges '*' \
    --destination-address-prefixes '*' \
    --destination-port-ranges 22 \
    --access Allow \
    --protocol Tcp \
    --description "Allow inbound SSH"
Run the following command in Cloud Shell to check whether you can now connect to your AppServer virtual machine.
bash

Copy
ssh azureuser@$APPSERVERIP -o ConnectTimeout=5
The network security group rule might take a minute or two to take effect. If you receive a connection failure message, try again.
You should now be able to connect. After the Are you sure you want to continue connecting (yes/no)? message, type yes.
Enter the password you used when you created the virtual machine.
Type exit to close the AppServer session.
Run the following command in Cloud Shell to check whether you can now connect to your DataServer virtual machine.
bash

Copy
ssh azureuser@$DATASERVERIP -o ConnectTimeout=5
You should now be able to connect. After the Are you sure you want to continue connecting (yes/no)? message, type yes.
Enter the password you used when you created the virtual machine.
Type exit to close the DataServer session.
Create a security rule to prevent web access
Now add a rule so that AppServer can communicate with DataServer over HTTP, but DataServer can't communicate with AppServer over HTTP. These are the internal IP addresses for these servers:
Server name	IP address
AppServer	10.0.0.4
DataServer	10.0.1.4
Run the following command in Cloud Shell to create a new inbound security rule to deny HTTP access over port 80.
Azure CLI

Copy
az network nsg rule create \
    --resource-group $rg \
    --nsg-name ERP-SERVERS-NSG \
    --name httpRule \
    --direction Inbound \
    --priority 150 \
    --source-address-prefixes 10.0.1.4 \
    --source-port-ranges '*' \
    --destination-address-prefixes 10.0.0.4 \
    --destination-port-ranges 80 \
    --access Deny \
    --protocol Tcp \
    --description "Deny from DataServer to AppServer on port 80"
Test HTTP connectivity between virtual machines
Here, you check if your new rule works. AppServer should be able to communicate with DataServer over HTTP. DataServer shouldn't be able to communicate with AppServer over HTTP.
Run the following command in Cloud Shell to connect to your AppServer virtual machine, and check if AppServer can communicate with DataServer over HTTP.
bash

Copy
ssh -t azureuser@$APPSERVERIP 'wget http://10.0.1.4; exit; bash'
Enter the password you used when you created the virtual machine.
The response should include a 200 OK message.
Run the following command in Cloud Shell to connect to your DataServer virtual machine, and check if DataServer can communicate with AppServer over HTTP.
bash

Copy
ssh -t azureuser@$DATASERVERIP 'wget http://10.0.0.4; exit; bash'
Enter the password you used when you created the virtual machine.
This shouldn't succeed, because you've blocked access over port 80. After several minutes, you should get a Connection timed out message. Press Ctrl+C to stop the command prior to the timeout.
